# -*- coding: utf-8 -*-
"""human activity recognisation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gR0uk4P9_1GHxt_Hyb2QKG9wiDbYM6bu
"""

from google.colab import files
uploaded = files.upload()

import zipfile
import os
import numpy as np
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout





with zipfile.ZipFile("UCI HAR Dataset.zip", 'r') as zip_ref:
    zip_ref.extractall()


os.listdir("UCI HAR Dataset")

def load_X(path):
    return np.loadtxt(path)

def load_y(path):
    return np.loadtxt(path).astype(int) - 1  # convert to 0-based

X_train = load_X("UCI HAR Dataset/train/X_train.txt")
y_train = load_y("UCI HAR Dataset/train/y_train.txt")
X_test = load_X("UCI HAR Dataset/test/X_test.txt")
y_test = load_y("UCI HAR Dataset/test/y_test.txt")

X_train = X_train.reshape((X_train.shape[0], 1, X_train.shape[1]))
X_test = X_test.reshape((X_test.shape[0], 1, X_test.shape[1]))

y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

model = Sequential()
model.add(LSTM(64, input_shape=(X_train.shape[1], X_train.shape[2]), return_sequences=False))
model.add(Dropout(0.5))
model.add(Dense(64, activation='relu'))
model.add(Dense(6, activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

model.fit(X_train, y_train, epochs=10, batch_size=64, validation_split=0.2)

activity_labels = [
    'Walking',
    'Walking Upstairs',
    'Walking Downstairs',
    'Sitting',
    'Standing',
    'Laying'
]

y_pred_probs = model.predict(X_test)  # probability scores
y_pred_classes = np.argmax(y_pred_probs, axis=1)
y_true_classes = np.argmax(y_test, axis=1)

print(" Sample Predictions with Class Names:")
for i in range(10):
    predicted_label = activity_labels[y_pred_classes[i]]
    true_label = activity_labels[y_true_classes[i]]
    print(f"Sample {i+1}: Predicted = {predicted_label}, Actual = {true_label}")

y_true_classes = np.argmax(y_test, axis=1)
y_pred_probs = model.predict(X_test)
y_pred_classes = np.argmax(y_pred_probs, axis=1)

print(" One Prediction per Class:\n")
already_seen = set()

for i in range(len(X_test)):
    true_class = y_true_classes[i]

    # If this class not seen yet, print it
    if true_class not in already_seen:
        sample = X_test[i].reshape(1, 1, 561)
        pred_class = np.argmax(model.predict(sample))
        print(f"Sample {i}:")
        print(f"Actual Activity   : {activity_labels[true_class]}")
        print(f"Predicted Activity: {activity_labels[pred_class]}\n")

        already_seen.add(true_class)

    if len(already_seen) == 6:
        break