# -*- coding: utf-8 -*-
"""FAKE_NEWS_MODEL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DEt0zWzrOQHosJcC0EVJAa9HcdyU00PF
"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

dataset = pd.read_csv('fake_news_train.csv')

dataset

import nltk
nltk.download('stopwords')

print (stopwords.words('english'))

dataset.isnull().sum()

dataset = dataset.fillna('atharva')

dataset

dataset['content']=dataset['author']+''+dataset['title']

print(dataset['content'])

x = dataset.drop(columns='label',axis=1)

x

y = dataset['label']

y

def stemming(content):
    stemmed_content = re.sub('[^a-zA-Z]',' ',content)
    stemmed_content = stemmed_content.lower()
    stemmed_content = stemmed_content.split()
    stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
    stemmed_content = ' '.join(stemmed_content)
    return stemmed_content

stemming("sevrus snape is the half blood prince")

dataset['content'] = dataset['content'].apply(stemming)

print(dataset['content'])

x = dataset['content'].values

y = dataset['label'].values

print(x)

print(y)

x.shape

y.shape

vectorizer = TfidfVectorizer()

vectorizer.fit(x)

x=vectorizer.transform(x)

x

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=2)

model = LogisticRegression()

model.fit(x_train,y_train)

y_pred = model.predict(x_test)

y_pred

y_test

from sklearn.metrics import confusion_matrix,classification_report

print(confusion_matrix(y_test,y_pred))

print(classification_report(y_test,y_pred))

x_new = x_test[3]
prediction = model.predict(x_new)
print(prediction)

if (prediction[0]==0):
    print('The news is real')
else:
    print('The news is fake')

